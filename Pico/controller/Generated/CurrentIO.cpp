// THIS FILE IS AUTOGENERATED, CHANGES MADE TO IT WILL BE LOST

#include "hardware/adc.h"

#include "../IO/CurrentIO.h"

#include "../IO/Input/Input.h"
#include "../IO/Input/Button.h"
#include "../IO/Input/Encoder.h"
#include "../IO/Input/EncoderWithButton.h"

#include "../IO/Output/LED.h"
#include "../IO/Output/PicoWDefaultLED.h"


namespace IO {

    etl::vector<etl::unique_ptr<IO::Input::Input>, 256> GetInputs()
    {
        etl::vector<etl::unique_ptr<IO::Input::Input>, 256> inputs;

        inputs.push_back(etl::unique_ptr<IO::Input::Input>(new IO::Input::Button(0, new IO::InputPin(4, IO::PinPull::None, false))));
        inputs.push_back(etl::unique_ptr<IO::Input::Input>(new IO::Input::Button(1, new IO::InputPin(26, IO::PinPull::None, false))));
        inputs.push_back(etl::unique_ptr<IO::Input::Input>(new IO::Input::Button(2, new IO::InputPin(3, IO::PinPull::None, false))));
        inputs.push_back(etl::unique_ptr<IO::Input::Input>(new IO::Input::Button(3, new IO::InputPin(27, IO::PinPull::None, false))));
        inputs.push_back(etl::unique_ptr<IO::Input::Input>(new IO::Input::Button(4, new IO::InputPin(2, IO::PinPull::None, false))));
        inputs.push_back(etl::unique_ptr<IO::Input::Input>(new IO::Input::Button(5, new IO::InputPin(22, IO::PinPull::None, false))));
        inputs.push_back(etl::unique_ptr<IO::Input::Input>(new IO::Input::EncoderWithButton(6, new IO::InputPin(18, IO::PinPull::Down, true), new IO::InputPin(19, IO::PinPull::Down, true), new IO::InputPin(16, IO::PinPull::Down, true), true)));
        inputs.push_back(etl::unique_ptr<IO::Input::Input>(new IO::Input::EncoderWithButton(7, new IO::InputPin(20, IO::PinPull::Down, true), new IO::InputPin(21, IO::PinPull::Down, true), new IO::InputPin(17, IO::PinPull::Down, true), true)));

        return inputs;
    }

    etl::vector<etl::unique_ptr<IO::Output::Output>, 256> GetOutputs() 
    {
        etl::vector<etl::unique_ptr<IO::Output::Output>, 256> outputs;

        outputs.push_back(etl::unique_ptr<IO::Output::Output>(new IO::Output::PicoWDefaultLED()));
        
        return outputs;
    }

    etl::unique_ptr<IO::Output::LED> GetDefaultLED() {
        return etl::unique_ptr<IO::Output::LED>(new IO::Output::PicoWDefaultLED());
    }

    namespace Battery {
        void Initialize() {
            adc_init();
            adc_gpio_init(28);
        }

        float GetBatteryVoltage() {
            adc_select_input(2);
            auto value = adc_read();
            return (float)(((float)value) / 4095.0 * 3.3);
        }

        bool HasBattery() {
            return true;
        }
    }
}

