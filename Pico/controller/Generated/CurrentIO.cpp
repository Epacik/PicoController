// THIS FILE IS AUTOGENERATED, CHANGES MADE TO IT WILL BE LOST

#include "hardware/adc.h"

#include "../IO/CurrentIO.h"

#include "../IO/Input/Input.h"
#include "../IO/Input/Button.h"
#include "../IO/Input/Encoder.h"
#include "../IO/Input/EncoderWithButton.h"

#include "../IO/Output/LED.h"
#include "../IO/Output/PicoWDefaultLED.h"


namespace IO {

    etl::vector<etl::unique_ptr<IO::Input::Input>, 256> GetInputs()
    {
        etl::vector<etl::unique_ptr<IO::Input::Input>, 256> inputs;

        inputs.push_back(etl::unique_ptr<IO::Input::Input>(new IO::Input::Button(0, 27)));
        inputs.push_back(etl::unique_ptr<IO::Input::Input>(new IO::Input::Button(1, 26)));
        inputs.push_back(etl::unique_ptr<IO::Input::Input>(new IO::Input::Button(2, 3)));
        inputs.push_back(etl::unique_ptr<IO::Input::Input>(new IO::Input::Button(3, 4)));
        inputs.push_back(etl::unique_ptr<IO::Input::Input>(new IO::Input::EncoderWithButton(4, 18, 19, 2)));
        inputs.push_back(etl::unique_ptr<IO::Input::Input>(new IO::Input::EncoderWithButton(5, 20, 21, 22)));

        return inputs;
    }

    etl::vector<etl::unique_ptr<IO::Output::Output>, 256> GetOutputs() 
    {
        etl::vector<etl::unique_ptr<IO::Output::Output>, 256> outputs;

        outputs.push_back(etl::unique_ptr<IO::Output::Output>(new IO::Output::PicoWDefaultLED()));
        
        return outputs;
    }

    etl::unique_ptr<IO::Output::LED> GetDefaultLED() {
        return etl::unique_ptr<IO::Output::LED>(new IO::Output::PicoWDefaultLED());
    }

    namespace Battery {
        void Initialize() {
            adc_init();
            adc_gpio_init(28);
        }

        float GetBatteryVoltage() {
            adc_select_input(2);
            auto value = adc_read();
            return (float)(((float)value) / 4095.0 * 3.3);
        }

        bool HasBattery() {
            return true;
        }
    }
}

